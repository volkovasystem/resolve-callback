!function(global,factory){if("function"==typeof define&&define.amd)define([],factory);else if("undefined"!=typeof exports)factory();else{factory(),global.resolveCallback={}}}("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:this,(function(){"use strict";module.exports=function resolveCallback(callback){if("function"!=typeof callback)return resolveCallback((function(){}));if(callback.$callData instanceof WeakMap==1&&"function"==typeof callback.$callData.get(callback).$callPromise)return callback;if(callback.$callData instanceof WeakMap!=1){const delegateCallback=function delegateCallback(){let result=void 0;try{result=callback.apply(this,arguments)}catch(error){result=error}finally{return delegateCallback.$callData.get(delegateCallback).$callEffect(callback,arguments,result,this)}};return Object.defineProperty(delegateCallback,"$callData",{value:(new WeakMap).set(delegateCallback,{}),configurable:!1,enumerable:!1,writable:!1}),Object.defineProperty(delegateCallback.$callData.get(delegateCallback),"$callEffect",{value:function(procedure,parameterList,result,scope){return delegateCallback.$callData.get(delegateCallback).$effectList.map((function(effect){return effect(procedure,parameterList,result,scope)})).pop()},configurable:!1,enumerable:!1,writable:!1}),Object.defineProperty(delegateCallback.$callData.get(delegateCallback),"$effectList",{value:[],configurable:!1,enumerable:!1,writable:!1}),Object.defineProperty(delegateCallback.$callData.get(delegateCallback),"$callPromise",{value:function(result){return new Promise((function(resolve,reject){result instanceof Error==1?reject(result):resolve(result)}))},configurable:!1,enumerable:!1,writable:!1}),delegateCallback.$callData.get(delegateCallback).$effectList.push((function(procedure,parameterList,result,scope){return delegateCallback.$callData.get(delegateCallback).$callPromise(result)})),delegateCallback}Object.defineProperty(callback.$callData.get(callback),"$callPromise",{value:function(result){return new Promise((function(resolve,reject){result instanceof Error==1?reject(result):resolve(result)}))},configurable:!1,enumerable:!1,writable:!1}),callback.$callData.get(callback).$effectList.push((function(procedure,parameterList,result,scope){return callback.$callData.get(callback).$callPromise(result)}))}}));